import tkinter as tk
from tkinter import ttk
import random
import string

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")

        self.length_label = ttk.Label(root, text="Password Length:")
        self.length_label.grid(row=0, column=0, padx=10, pady=10)

        self.length_var = tk.StringVar()
        self.length_entry = ttk.Entry(root, textvariable=self.length_var, width=5)
        self.length_entry.grid(row=0, column=1, padx=10, pady=10)

        self.uppercase_var = tk.BooleanVar()
        self.uppercase_checkbox = ttk.Checkbutton(root, text="Uppercase", variable=self.uppercase_var)
        self.uppercase_checkbox.grid(row=1, column=0, padx=10, pady=10)

        self.lowercase_var = tk.BooleanVar()
        self.lowercase_checkbox = ttk.Checkbutton(root, text="Lowercase", variable=self.lowercase_var)
        self.lowercase_checkbox.grid(row=1, column=1, padx=10, pady=10)

        self.digits_var = tk.BooleanVar()
        self.digits_checkbox = ttk.Checkbutton(root, text="Digits", variable=self.digits_var)
        self.digits_checkbox.grid(row=2, column=0, padx=10, pady=10)

        self.symbols_var = tk.BooleanVar()
        self.symbols_checkbox = ttk.Checkbutton(root, text="Symbols", variable=self.symbols_var)
        self.symbols_checkbox.grid(row=2, column=1, padx=10, pady=10)

        self.generate_button = ttk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.grid(row=3, column=0, columnspan=2, pady=20)

        self.result_label = ttk.Label(root, text="")
        self.result_label.grid(row=4, column=0, columnspan=2)

    def generate_password(self):
        length = int(self.length_var.get())
        include_uppercase = self.uppercase_var.get()
        include_lowercase = self.lowercase_var.get()
        include_digits = self.digits_var.get()
        include_symbols = self.symbols_var.get()

        characters = ""
        if include_uppercase:
            characters += string.ascii_uppercase
        if include_lowercase:
            characters += string.ascii_lowercase
        if include_digits:
            characters += string.digits
        if include_symbols:
            characters += string.punctuation

        if not characters:
            self.result_label.config(text="Please select at least one option.")
            return

        password = ''.join(random.choice(characters) for _ in range(length))
        self.result_label.config(text=f"Generated Password: {password}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
